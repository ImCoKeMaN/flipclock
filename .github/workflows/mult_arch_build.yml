name: Build Multi-Architecture for PortMaster

on:
  push:
    branches: [ mingw ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    branches: [ mingw ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04-arm
    outputs:
      game_folder: ${{ steps.parse-json.outputs.game_folder }}
      game_name: ${{ steps.parse-json.outputs.game_name }}
      game_zip: ${{ steps.parse-json.outputs.game_zip }}
      game_start: ${{ steps.parse-json.outputs.game_start }}
      game_exe: ${{ steps.parse-json.outputs.game_exe }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Parse port.json
      id: parse-json
      run: |
        PORT_JSON_PATH="latest/manicminer/port.json" # make .env
        
        if [ ! -f "$PORT_JSON_PATH" ]; then
          echo "Error: $PORT_JSON_PATH not found"
          exit 1
        fi
        GAME_FOLDER=$(jq -r '.items[1]' "$PORT_JSON_PATH" | sed 's|/||g')
        GAME_NAME=$(jq -r '.attr.title' "$PORT_JSON_PATH")
        GAME_ZIP=$(jq -r '.name' "$PORT_JSON_PATH")
        GAME_START=$(jq -r '.items[0]' "$PORT_JSON_PATH")
        PORT_DIR=$(dirname "$PORT_JSON_PATH")
        AARCH64_FILE=$(find "$PORT_DIR" -name "*.aarch64" -type f | head -1)
        if [ -n "$AARCH64_FILE" ]; then
          EXE_NAME=$(basename "$AARCH64_FILE" .aarch64)
        fi
        echo "game_folder=$GAME_FOLDER" >> $GITHUB_OUTPUT
        echo "game_name=$GAME_NAME" >> $GITHUB_OUTPUT
        echo "game_zip=$GAME_ZIP" >> $GITHUB_OUTPUT
        echo "game_start=$GAME_START" >> $GITHUB_OUTPUT
        echo "game_exe=$EXE_NAME" >> $GITHUB_OUTPUT

    - name: Set environment variables for current job
      run: |
        echo "GAME_FOLDER=${{ steps.parse-json.outputs.game_folder }}" >> $GITHUB_ENV
        echo "GAME_NAME=${{ steps.parse-json.outputs.game_name }}" >> $GITHUB_ENV
        echo "GAME_ZIP=${{ steps.parse-json.outputs.game_zip }}" >> $GITHUB_ENV
        echo "GAME_START=${{ steps.parse-json.outputs.game_start }}" >> $GITHUB_ENV
        echo "GAME_EXE=${{ steps.parse-json.outputs.game_exe }}" >> $GITHUB_ENV

    - name: Build in ARM64 container
      run: |
        game="${{ steps.parse-json.outputs.game_exe }}"
        docker run --rm \
          --platform linux/arm64 \
          -v $PWD:/workspace \
          -w /workspace \
          -e DEBIAN_FRONTEND=noninteractive \
          arm64v8/ubuntu:20.04 \
          /bin/bash -c "
          apt-get update
          apt-get install -y build-essential make cmake file wget tar \
            pkg-config libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
            libxi-dev libxinerama-dev libxxf86vm-dev libwayland-dev libxkbcommon-dev \
            libasound2-dev libpulse-dev libaudio-dev libjack-dev libsamplerate0-dev \
            libgbm-dev libegl1-mesa-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev
          
          wget -q -O sdl.tar.gz https://github.com/libsdl-org/SDL/archive/refs/tags/release-2.30.2.tar.gz
          tar -xzf sdl.tar.gz
          mv SDL-release-2.30.2 sdl-source
          
          cd sdl-source
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
          make -j\$(nproc)
          make install
          cd ../..
          
          make
          mkdir -p dist
          cp $game dist/${game}-aarch64
          strip dist/${game}-aarch64
          tar -czf ${game}-linux-arm64.tar.gz -C dist .
          "

    - name: Upload ARM64 binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.parse-json.outputs.game_exe }}-linux-arm64
        path: ${{ steps.parse-json.outputs.game_exe }}-linux-arm64.tar.gz
        retention-days: 7

  build-x86_64:
    runs-on: ubuntu-latest
    needs: build-arm64

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set environment variables from previous job outputs
      run: |
        echo "GAME_FOLDER=${{ needs.build-arm64.outputs.game_folder }}" >> $GITHUB_ENV
        echo "GAME_NAME=${{ needs.build-arm64.outputs.game_name }}" >> $GITHUB_ENV
        echo "GAME_ZIP=${{ needs.build-arm64.outputs.game_zip }}" >> $GITHUB_ENV
        echo "GAME_START=${{ needs.build-arm64.outputs.game_start }}" >> $GITHUB_ENV
        echo "GAME_EXE=${{ needs.build-arm64.outputs.game_exe }}" >> $GITHUB_ENV

    - name: Checkout submodules (if any)
      run: git submodule update --init --recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          appstream \
          wget \
          fuse \
          libpipewire-0.3-dev \
          libfuse2 \
          build-essential \
          make \
          patchelf

    - name: Build SDL library (if needed)
      run: |
        if [ -f "Makefile" ] && grep -q "SDL" "Makefile"; then
          echo "Using system SDL libraries"
        else
          echo "Building custom SDL..."
          SDL_RELEASE_TAG=release-2.30.2
          git clone https://github.com/libsdl-org/SDL.git sdl-build
          cd sdl-build
          git checkout $SDL_RELEASE_TAG
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          
          if ! grep -q "PKG_PIPEWIRE_VERSION:INTERNAL=" CMakeCache.txt; then
            echo "SDL library configured with PipeWire support"
          else
            echo "Warning: SDL library not configured with PipeWire support"
          fi
          
          make -j$(nproc)
          export SDL2_DIR=$(pwd)
          cd ../..
        fi

    - name: Build ${{ needs.build-arm64.outputs.game_name }}
      run: |
        make

    - name: Download ARM64 artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-arm64.outputs.game_exe }}-linux-arm64
        path: arm64-artifact

    - name: Extract ARM64 binary
      run: |
        game="${{ needs.build-arm64.outputs.game_exe }}"
        tar -xzf arm64-artifact/${game}-linux-arm64.tar.gz -C arm64-artifact/
        file arm64-artifact/${game}-aarch64 || echo "ARM64 binary not found"
        ls -la arm64-artifact/

    - name: Download AppImage tool
      run: |
        wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool

    - name: Package ${{ needs.build-arm64.outputs.game_name }} into AppImage
      run: |
        game="${{ needs.build-arm64.outputs.game_exe }}"
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Create desktop entry
        cat > AppDir/usr/share/applications/${game}.desktop << EOF
        [Desktop Entry]
        Name=${{ needs.build-arm64.outputs.game_name }}
        Exec=${{ needs.build-arm64.outputs.game_exe }}
        Icon=${{ needs.build-arm64.outputs.game_exe }}
        Type=Application
        Categories=Game;
        EOF
        
        # Copy binary
        cp $game AppDir/usr/bin/
        chmod +x AppDir/usr/bin/$game
        
        # Copy icon (assuming it exists)
        if [ -f "src/${game}.png" ]; then
          cp src/${game}.png AppDir/usr/share/icons/hicolor/256x256/apps/
          cp src/${game}.png AppDir/
        fi
        
        # Copy required libraries using ldd
        echo "Copying required libraries..."
        mkdir -p AppDir/usr/lib
        
        # Function to copy libraries recursively
        copy_libs() {
          local binary=$1
          ldd "$binary" | while read -r line; do
            # Extract library path
            if [[ $line == *" => "* ]]; then
              lib_path=$(echo "$line" | awk -F '=> ' '{print $2}' | awk '{print $1}')
              if [[ "$lib_path" == /* && -f "$lib_path" ]]; then
                # Skip system libraries that should be available on target systems
                if [[ "$lib_path" != /lib/* && "$lib_path" != /usr/lib/* ]]; then
                  echo "Copying: $lib_path"
                  cp --parents "$lib_path" AppDir/
                else
                  # Copy essential SDL and graphics libraries
                  if [[ "$lib_path" == *"libSDL"* || \
                        "$lib_path" == *"libpng"* || \
                        "$lib_path" == *"libjpeg"* || \
                        "$lib_path" == *"libtiff"* || \
                        "$lib_path" == *"libwebp"* || \
                        "$lib_path" == *"libfreetype"* || \
                        "$lib_path" == *"libpipewire"* || \
                        "$lib_path" == *"libvulkan"* || \
                        "$lib_path" == *"libGL"* || \
                        "$lib_path" == *"libasound"* || \
                        "$lib_path" == *"libpulse"* ]]; then
                    echo "Copying system library: $lib_path"
                    cp --parents "$lib_path" AppDir/
                  fi
                fi
              fi
            fi
          done
        }
        
        # Copy libraries for the main binary
        copy_libs "$game"
        
        # Also copy any additional binaries in the AppDir
        for binary in AppDir/usr/bin/*; do
          if [ -f "$binary" ] && [ -x "$binary" ]; then
            copy_libs "$binary"
          fi
        done
        
        # Copy SDL library if custom built
        if [ -f "sdl-build/build/libSDL2-2.0.so.0" ]; then
          cp sdl-build/build/libSDL2-2.0.so.0 AppDir/usr/lib/
          # Also copy any other SDL libraries from custom build
          cp sdl-build/build/libSDL2*.so* AppDir/usr/lib/ 2>/dev/null || true
        fi
        
        # Set up AppRun and desktop file - FIXED VERSION
        cd AppDir
        cat > AppRun << EOF
        #!/bin/bash
        HERE="\$(dirname "\$(readlink -f "\${0}")")"
        export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
        exec "\${HERE}/usr/bin/$game" "\$@"
        EOF
        chmod +x AppRun
        ln -sf usr/share/applications/${game}.desktop ${game}.desktop
        
        # Create the icon link if icon exists
        if [ -f "usr/share/icons/hicolor/256x256/apps/${game}.png" ]; then
          ln -sf usr/share/icons/hicolor/256x256/apps/${game}.png ./
        fi
        cd ..
        
        # Generate AppImage
        ./appimagetool AppDir ${game}-x86_64.AppImage

    - name: Generate PortMaster package with both architectures
      run: |
        game="${{ needs.build-arm64.outputs.game_exe }}"
        mkdir -p pm/$game
        cp latest/*.sh pm/ 2>/dev/null || true
        chmod +x pm/*.sh
        cp latest/$game/*.png latest/$game/*.txt latest/$game/*.json \
        latest/$game/*.md latest/$game/*.xml latest/$game/*.gptk latest/$game/${game}.armhf pm/$game/ 2>/dev/null || true
        cp $game pm/$game/${game}.x86_64
        strip pm/$game/${game}.x86_64
        chmod +x pm/$game/${game}.x86_64        
        cp arm64-artifact/${game}-aarch64 pm/$game/${game}.aarch64
        chmod +x pm/$game/${game}.aarch64
        cd pm
        zip -r ../${game}.zip .

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.build-arm64.outputs.game_exe }}-appimage
        path: ${{ needs.build-arm64.outputs.game_exe }}-x86_64.AppImage
        retention-days: 7

    - name: Upload multi-arch PortMaster artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.build-arm64.outputs.game_exe }}-portmaster
        path: ${{ needs.build-arm64.outputs.game_exe }}.zip
        retention-days: 7
